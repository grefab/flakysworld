Flakysworld -- A Very Basic 2D World Simulator for AI Research

== Introduction ==

Flaky, the little triangle, lives in a 2D world. It has actuators (tiny little thrusters) and an sensor (an eye that casts rays into the world). The actuators take input and translate it into movement, whereas the sensors take input from the world around Flaky and translate it into output. In-/output is just a set of floating point values between 0 and 1.

The purpose of this little simulation is to allow for an connection with some kind of artificial neuronal network, which takes the input and produces output. This way any action that is performed by flaky has a direct impact on sensor data, which in turn can be processed by the neural net.

== Technical Details ==

The application uses Qt heavily for internal processing and depends on Box2D for physics simulation. In-/output is given via JSON-wrapped objects over a socket, so the processing neuronal net does not have any technical dependencies.

The entities in the system communicate via Qt signal/slots wherever possible to keep a) the code clean and b) allow for multiple threads without the hassle of mutexes. This way the application is basically divided in an processing unit, the /universe/ and a set of widgets and views, the /GUI/. Each of them resides in a separate thread. The network communication entity will be modeled as a separate thread as well.

== Current Status ==

Actuators, sensors and physical world interaction are implemented. There is a simple view that shows what happens in Flaky's world. The network/JSON part is soon to come.

== How To Install ==

1. Check out the code of Flakysworld.

2. Make sure you have Qt SDK installed. I use 4.7. This includes Qt Creator, which I use as IDE.

3. Make sure to have Box2D installed. On my machine it resides in /usr/local/include/Box2D and /usr/local/lib. This can be adjusted in the flakysworld.pro file to fit your needs.

4. Load the .pro file with Qt Creator.

5. Build an run.

== FAQ ==

Q: So how do I control Flaky?
A: By sending values for the thrusters, one for left and right. This applies a pulse to the corresponding thruster. Currently, this happens using keyboard commands or the UI.

Q: I don't see anything!
A: The rendering is done using OpenGL per default. This is set up by ui->graphicsView->setViewport() in surface.cpp. Uncomment this line if you need to work without OpenGL and use software rendering instead.

Q: You call this "controls"? Are you serious?
A: I know they're more than ugly. Their purpose is just to test if interaction works basically. Go on and code a net that controls them in a sophisticated way!

== Licenses ==

- All the code in Flakysworld, except its dependencies, which have spearate licenses (see below), is published under the MIT License. See http://www.opensource.org/licenses/mit-license for details. Basically you can do whatever you like with it.

- Qt and its libraries are licensed (as one possibility) under the LGPL. See http://qt.nokia.com/products/licensing/ for details.

- Box2D (http://www.box2d.org/) has its own license:

Copyright (c) 2006-2007 Erin Catto http://www.gphysics.com

This software is provided 'as-is', without any express or implied
warranty. In no event will the authors be held liable for any damages
arising from the use of this software.

Permission is granted to anyone to use this software for any purpose,
including commercial applications, and to alter it and redistribute it
freely, subject to the following restrictions:

1. The origin of this software must not be misrepresented; you must not
claim that you wrote the original software. If you use this software
in a product, an acknowledgment in the product documentation would be
appreciated but is not required.
2. Altered source versions must be plainly marked as such, and must not be
misrepresented as being the original software.
3. This notice may not be removed or altered from any source distribution.